k[[1]]
class(k[[1]])
k <- veja(A)
k
class(k[[1]])
n <- length(A)
upper <- reversal(A)$teza #zgornja meja, ce jo presezemo, se ustavimo
lista <- list()
source('~/OR_TSP/TSP_R/hevristika.R')
A
nivo(A)
source('~/OR_TSP/TSP_R/hevristika.R')
nivo(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A
source('~/OR_TSP/TSP_R/hevristika.R')
veja(A)
A <- simetricna(10)
A
veja(A)
reversal(A)$teze
reversal(A)$teza
B
A
A[!is.finite(A)]<-100 #nastavimo inf na velike vrednosti, lpSolve ne zna delati z inf
A
lp.assign(A)
reversal(A)
source('~/OR_TSP/TSP_R/hevristika.R')
source('~/OR_TSP/TSP_R/hevristika.R')
A
veja(A)
k <- nivo(k)
k <- veja(A)
k <- nivo(k)
k <- nivo(k)
k
k
k <- nivo(k)
k
source('~/OR_TSP/TSP_R/hevristika.R')
k <- veja(A)
k <- nivo(k)
k
k <- nivo(k)
k
k <- nivo(k)
k
A <- simetricna(20)
k <- veja(A)
A <- simetricna(20)x
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
A <- simetricna(20)x
A <- simetricna(20)x
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
A <- simetricna(20)x
k <- nivo(k)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
k
reversal(A)$teza
source('~/OR_TSP/TSP_R/hevristika.R')
source('~/OR_TSP/TSP_R/hevristika.R')
A
A <- simetricna(10)
A
veja(A)
k <- veja(A)
k <- nivo(k)
k
k <- nivo(k)
source('~/OR_TSP/TSP_R/hevristika.R')
source('~/OR_TSP/TSP_R/hevristika.R')
A
k <- veja(A)
source('~/OR_TSP/TSP_R/hevristika.R')
k <- veja(A)
k <- nivo(i)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
upper
reversal(A)$teza
A <- simetricna(30)
k <- veja(A)
for (i in 1:100){
k <- nivo(k)
}
k
A <- simetricna(10)
k <- veja(A)
for (i in 1:100){
k <- nivo(k)
}
k
reversal(A)$teza
A <- simetricna(10)
k <- veja(A)
for (i in 1:100){
k <- nivo(k)
}
k
reversal(A)
A <- simetricna(30)
k <- veja(A)
for (i in 1:100){
k <- nivo(k)
}
A
k
A <- simetricna(30)
k <- veja(A)
for (i in 1:100){
k <- nivo(k)
}
k
A <- simetricna(10)
k <- veja(A)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
reversal(A)
is.character(k)
class(k)
k[is.character(k)]
k[[2]]
k[[is.character(length(k))]]
length(k)
k[[1:2]]
k[[]]
k[[5]]
k[[2]]
c(FALSE,TRUE)==TRUE
union(c(FALSE,TRUE))
union(FALSE,TRUE)
all(k)
k
all(c(TRUE,FALSE))
k[[]]
all()
A
k <- veja(A)
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne <- append(logicne,is.character(k[[i]]))
}
logicne
!all(logicne)
!all(c())
k <- veja(A)
logicne <- c()
while !all(logicne){
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne <- append(logicne,is.character(k[[i]]))
}
k<-nivo(k)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne <- append(logicne,is.character(k[[i]]))
}
logicne
!all(logicne)
source('~/OR_TSP/TSP_R/hevristika.R')
bb(A)
bb(A)
k <- veja(A)
logicne <- c()
while (!all(logicne)){
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne <- append(logicne,is.character(k[[i]]))
}
k<-nivo(k)
}
k
k <- veja(A)
logicne <- c()
while (!all(logicne)){
k<-nivo(k)
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne <- append(logicne,is.character(k[[i]]))
}
}
k
logicne
all(logicne)
!all(logicne)
k <- veja(A)
logicne <- c()
while (!all(logicne)){
k<-nivo(k)
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne[i] <- is.character(k[[i]])
}
}
logicne
logicne
k
is.character(k[[2]])
logicne[2]
logicne[1]
k <- veja(A)
logicne <- c()
class(logicne)
!all(c(1))
!all()
all()
!all(logicne)
logicne <- c(FALSE)
!all(logicne)
source('~/OR_TSP/TSP_R/hevristika.R')
bb(A)
k <- bb(A)
k
reversal(A)
which.min(k)
n
k[1[1]]
k[[[2]]]
k[[1]]
k[[1]][1]
j=3
as.integer("")
NA < min
as.integer("")
source('~/OR_TSP/TSP_R/hevristika.R')
bb(A)
bb(A)
source('~/OR_TSP/TSP_R/hevristika.R')
source('~/OR_TSP/TSP_R/hevristika.R')
A <- simetricna(10)
A
bb(A)
bb(A)
k <- veja(A)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k <- nivo(k)
k
bb(A)
k <- veja(A)
logicne <- c(FALSE)
while (!all(logicne)){
k<-nivo(k)
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne[i] <- is.character(k[[i]])
}
}
k
pot <- c()
cena <- c()
min <- reversal(A)$teza
min
source('~/OR_TSP/TSP_R/hevristika.R')
bb(A)
reversal(A)
bb(A)
bb(A)
A <- simetricna(100)
bb(A)
A <- simetricna(20)
bb(A)
A <- simetricna(10)
bb(A)
A <- simetricna(12)
bb(A)
A <- simetricna (15)
bb(A)
A <- simetricna(17)
bb(A)
A < s
A <- simetricna(20)
bb(A)
A <- sime
A <- simetricna(15)
bb(A)
reversal(A)
26/29
3/26
bb(A)
as.numeric(bb(A)[2])
najblizji_sosed(A,2)
nakljucni_zacetek <- sample(1:10,1)
pot_sosed <- najblizji_sosed(A,nakljucni_zacetek)
pot_sosed
pot_teza <- teza(A,pot_sosed)
pot_teza
bb(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_najblizji(10)
m=10
relativna <- c()
for (i in 1:m){
A <- simetricna(10)
nakljucni_zacetek <- sample(1:10,1)
prava_vrednost <- as.numeric(bb(A)[2])
pot_sosed <- najblizji_sosed(A,nakljucni_zacetek)
pot_teza <- teza(A,pot_sosed)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
}
relativna
hist(relativna)
hist(relativna,probability = TRUE)
primerjava_najblizji(100)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov za m= ",m))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih"))
histogram
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih"))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",legend = c("povprecje"),col="red")
histogram <- legend("topright",c(paste0("Vzorčno povprečje = ",round(mean(relativna),2)),col="red")
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",c(paste0("Vzorčno povprečje = ",round(mean(relativna),2)),col="red")
histogram <- legend("topright",legend=c(paste0("Vzorčno povprečje = ",round(mean(relativna),2))),col="red")
round(mean(relativna),2))
round(mean(relativna),2)
histogram <- legend("topleft",col=c("red"), lwd=2,
legend=c(paste0("Vzorčno povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
povp <- mean(relativna)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topleft",col=c("red"), lwd=2,
legend=c(paste0("Vzorčno povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=1, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
return(hisogram)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_najblizji(100)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_optnajblizji(A)
primerjava_optnajblizji(100)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_optnajblizji(100)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_optnajblizji(100)
reversal(A)
pot_teza <- as.numeric(reversal(A)$teza)
pot_teza
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_reversal(100)
primerjava_reversal(1000)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_reversal(1000)
primerjava_najblizji(1000)
primerjava_optnajblizji(1000)
A
bb(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A <- simetricna(10)
A
bb(A)
reversal(A)
A <- simetricna(20)
reversal(A)
bb(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A
bb(A)
C <-lp.assign(A,direction = "min")$solution
A
A <- simetricna(10)
A
A[!is.finite(A)] <- 100
A
C <-lp.assign(A,direction = "min")$solution
C
resitev <- permutacije(which(!C == 0,arr.ind = TRUE))
resitev
which(!C == 0,arr.ind = TRUE)
A
bb(A)
bb(A)
A
A <- simetricna(10)
bb(A)
veja(A)
bb(A)
k <- bb(A)
k
k
nivo(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A <- simetricna(10)
A
bb(A)
bb(A)
warnings()
