nakljucni_zacetek <- sample(1:10,1)
prava_vrednost <- as.numeric(bb(A)[2])
pot_sosed <- najblizji_sosed(A,nakljucni_zacetek)
pot_teza <- teza(A,pot_sosed)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
}
relativna
hist(relativna)
hist(relativna,probability = TRUE)
primerjava_najblizji(100)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov za m= ",m))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih"))
histogram
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih"))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",legend = c("povprecje"),col="red")
histogram <- legend("topright",c(paste0("Vzorčno povprečje = ",round(mean(relativna),2)),col="red")
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",c(paste0("Vzorčno povprečje = ",round(mean(relativna),2)),col="red")
histogram <- legend("topright",legend=c(paste0("Vzorčno povprečje = ",round(mean(relativna),2))),col="red")
round(mean(relativna),2))
round(mean(relativna),2)
histogram <- legend("topleft",col=c("red"), lwd=2,
legend=c(paste0("Vzorčno povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
povp <- mean(relativna)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topleft",col=c("red"), lwd=2,
legend=c(paste0("Vzorčno povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=1.2, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=1, bty="n", box.lty=2, box.lwd=2)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota")
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
return(hisogram)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_najblizji(100)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_optnajblizji(A)
primerjava_optnajblizji(100)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_optnajblizji(100)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_optnajblizji(100)
reversal(A)
pot_teza <- as.numeric(reversal(A)$teza)
pot_teza
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_reversal(100)
primerjava_reversal(1000)
source('~/OR_TSP/TSP_R/hevristika.R')
primerjava_reversal(1000)
primerjava_najblizji(1000)
primerjava_optnajblizji(1000)
A
bb(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A <- simetricna(10)
A
bb(A)
reversal(A)
A <- simetricna(20)
reversal(A)
bb(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A
bb(A)
C <-lp.assign(A,direction = "min")$solution
A
A <- simetricna(10)
A
A[!is.finite(A)] <- 100
A
C <-lp.assign(A,direction = "min")$solution
C
resitev <- permutacije(which(!C == 0,arr.ind = TRUE))
resitev
which(!C == 0,arr.ind = TRUE)
A
bb(A)
bb(A)
A
A <- simetricna(10)
bb(A)
veja(A)
bb(A)
k <- bb(A)
k
k
nivo(A)
source('~/OR_TSP/TSP_R/hevristika.R')
A <- simetricna(10)
A
bb(A)
bb(A)
warnings()
a <- primerjava_reversal(1000)
A
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
A <- simetricna(10)
bb(A)
primerjava_najblizji(10)
primerjava_reversal(10)
m=10
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
}
relativna <- c()
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
}
relativna
primerjava_reversal(10)
primerjava_reversal(1000)
primerjava_reversal(50)
primerjava_reversal(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_reversal(100)
primerjava_reversal(1000)
primerjava_optnajblizji(1000)
A
A <- simetricna(10)
bb(A)
primerjava_optnajblizji(200)
primerjava_optnajblizji(200)
primerjava_reversal(1000)
povp
m=1000
relativna <- c()
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
}
primerjava_reversal(1000)
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
}
relativna
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
if (is.na(relativna)){
break
}
}
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
m=100000
relativna <- c()
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
if (is.na(relativna[i])){
break
}
}
relativna
A
bb(A)
0/0
as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
pot_teza
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
napaka
i=o
relativna <- c()
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
if (is.na(napaka)){
break
}
}
napaka
A
bb(A)
B <- A
B
veja(B)
bb <- function(A){
k <- veja(A)
if (is.character(k)){ #že v štartu dobimo cikel in ni treba delat vej naprej
return(k)
}
logicne <- c(FALSE)
while (!all(logicne)){
k<-nivo(k)
n <- length(k)
logicne <- c()
for (i in 1:n){
logicne[i] <- is.character(k[[i]])
}
}
pot <- c()
cena <- c()
for (j in 1:n){
pot <- append(pot,k[[j]][1])
cena <- append(cena,as.numeric(k[[j]][2]))
}
indeks <- which.min(cena)
return(c(pot[indeks],cena[indeks]))
}
bb(A)
zacetek <- opt_zacetek(A)
prava_vrednost <- as.numeric(bb(A)[2])
pot_sosed <- najblizji_sosed(A,zacetek)
pot_teza <- teza(A,pot_sosed)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
relativna
A
bb(A)
relativna <- c()
for (i in 1:m){
A <- simetricna(10)
prava_vrednost <- as.numeric(bb(A)[2])
pot_teza <- as.numeric(reversal(A)$teza)
napaka <- abs(pot_teza-prava_vrednost)/prava_vrednost
relativna <- append(relativna,napaka)
if (is.na(napaka)){
break
}
}
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_reversal(1000)
povp <- mean(relativna)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode obratov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks = 30)
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend(c(16,0.7),col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
?legend
histogram <- legend(15,0.7,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram <- legend(5,0.1,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_reversal(1000)
histogram <- legend("topright",col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.6)
histogram <- legend(0.4,10,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.6)
histogram <- legend(0.6,10,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
return(histogram)
histogram <- legend(0.8,20,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode obratov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks = 30)
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend(0.8,20,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram <- legend(0.4,20,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram <- legend(0.4,17,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode obratov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks = 30)
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend(0.4,17,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))))
histogram <- hist(relativna,probability = TRUE,main = paste0("Relativna napaka metode obratov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks = 30)
histogram <- abline(v=mean(relativna),col="red",lwd=2)
histogram <- legend(0.4,17,col=c("red"),
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
histogram <- legend(0.4,17,col=c("red"), lwd=2,
legend=c(paste0("Povprečje = ",round(povp,2))), cex=0.8)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_reversal(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_najblizji(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_najblizji(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_najblizji(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava_najblizji(1000)
primerjava_najblizji(1000)
primerjava_optnajblizji(1000)
primerjava_reversal(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
primerjava(1)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(1)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
primerjava(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
par(mfrow=c(3,1))
histogram1
histogram2
histogram3
m=10
for (i in 1:m){
A <- simetricna(10)
nakljucni_zacetek <- sample(1:10,1)
prava_vrednost <- as.numeric(bb(A)[2])
pot_sosed1 <- najblizji_sosed(A,nakljucni_zacetek)
pot_teza1 <- teza(A,pot_sosed1)
napaka1 <- abs(pot_teza1-prava_vrednost)/prava_vrednost
relativna1 <- append(relativna1,napaka1)
zacetek <- opt_zacetek(A)
pot_sosed2 <- najblizji_sosed(A,zacetek)
pot_teza2 <- teza(A,pot_sosed2)
napaka2 <- abs(pot_teza2-prava_vrednost)/prava_vrednost
relativna2 <- append(relativna2,napaka2)
pot_teza3 <- as.numeric(reversal(A)$teza)
napaka3 <- abs(pot_teza3-prava_vrednost)/prava_vrednost
relativna3 <- append(relativna3,napaka3)
}
relativna1 <- c()
relativna2 <- c()
relativna3 <- c()
for (i in 1:m){
A <- simetricna(10)
nakljucni_zacetek <- sample(1:10,1)
prava_vrednost <- as.numeric(bb(A)[2])
pot_sosed1 <- najblizji_sosed(A,nakljucni_zacetek)
pot_teza1 <- teza(A,pot_sosed1)
napaka1 <- abs(pot_teza1-prava_vrednost)/prava_vrednost
relativna1 <- append(relativna1,napaka1)
zacetek <- opt_zacetek(A)
pot_sosed2 <- najblizji_sosed(A,zacetek)
pot_teza2 <- teza(A,pot_sosed2)
napaka2 <- abs(pot_teza2-prava_vrednost)/prava_vrednost
relativna2 <- append(relativna2,napaka2)
pot_teza3 <- as.numeric(reversal(A)$teza)
napaka3 <- abs(pot_teza3-prava_vrednost)/prava_vrednost
relativna3 <- append(relativna3,napaka3)
}
povp1 <- mean(relativna1)
histogram1 <- hist(relativna1,probability = TRUE,main = paste0("Relativna napaka metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks=30)
histogram1 <- abline(v=povp1,col="red",lwd=2)
histogram1 <- legend("topleft",col=c("red"), lwd=2,bty="n",xjust=1, seg.len=0.5,
legend=c(paste0("Povprečje = ",round(povp1,2))), cex=0.8)
povp2 <- mean(relativna2)
histogram2 <- hist(relativna2,probability = TRUE,main = paste0("Relativna napaka opt. metode najbližjih sosedov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks = 30)
histogram2 <- abline(v=povp2,col="red",lwd=2)
histogram2 <- legend("topleft",col=c("red"), lwd=2,bty="n",xjust=1, seg.len=0.5,
legend=c(paste0("Povprečje = ",round(povp2,2))), cex=0.8)
povp3 <- mean(relativna3)
histogram3 <- hist(relativna3,probability = TRUE,main = paste0("Relativna napaka metode obratov"),
xlab = "Relativna napaka",ylab = "Gostota",breaks = 30)
histogram3 <- abline(v=povp3,col="red",lwd=2)
histogram3 <- legend("topleft",col=c("red"), lwd=2,bty="n",xjust=1, seg.len=0.5,
legend=c(paste0("Povp = ",round(povp3,2))), cex=0.8)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(10)
primerjava(100)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(100)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(1000)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
primerjava(1000)
A
bb(A)
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
b <- casovna_zahtevnost(25)
b <- casovna_zahtevnost(25)
A
A
source('~/OR_TSP/TSP_R/TSP_algoritmi.R')
n=25
velikost <- c()
tip <- c() #nacin resevanja ("sosed","rev","bb")
cas_tabela <- c()
for (s in 2:n){
for (j in 1:10){
cas_sosed_sim <- c()
cas_reversal_sim <- c()
cas_bb_sim <- c()
A <- simetricna(s) #simulacija matrike
#NAJBLIZJI SOSED
start1 <- proc.time()
najblizji(A)
konec1 <- proc.time()
cas1 <- (konec1-start1)[1]
cas_sosed_sim <- append(cas_sosed_sim,cas1)
#REVERSAL
start2 <- proc.time()
reversal(A)
konec2 <- proc.time()
cas2 <- (konec2-start2)[1]
cas_reversal_sim <- append(cas_reversal_sim,cas2+cas1) #pristejemo se metodo sosedov,
#saj ze zacnemo z "optimalno" potjo, ki smo jo prej ze poracunali
#BB ALGORITEM
start3 <- proc.time()
bb(A)
konec3 <- proc.time()
cas3 <- (konec3-start3)[1]
cas_bb_sim <- append(cas_bb_sim,cas3)
}
velikost <- append(velikost,rep(s,3))
tip <- append(tip,c("sosed","rev","bb"))
cas_tabela <- append(cas_tabela,c(mean(cas_sosed_sim),mean(cas_reversal_sim),mean(cas_bb_sim)))
}
cas_tabela
length(cas_tabela)
42%3
42/3
velikost <- c()
tip <- c() #nacin resevanja ("sosed","rev","bb")
cas_tabela <- c()
for (s in 2:n){
for (j in 1:10){
cas_sosed_sim <- c()
cas_reversal_sim <- c()
cas_bb_sim <- c()
A <- simetricna(s) #simulacija matrike
#NAJBLIZJI SOSED
start1 <- proc.time()
najblizji(A)
konec1 <- proc.time()
cas1 <- (konec1-start1)[1]
cas_sosed_sim <- append(cas_sosed_sim,cas1)
#REVERSAL
start2 <- proc.time()
reversal(A)
konec2 <- proc.time()
cas2 <- (konec2-start2)[1]
cas_reversal_sim <- append(cas_reversal_sim,cas2+cas1) #pristejemo se metodo sosedov,
#saj ze zacnemo z "optimalno" potjo, ki smo jo prej ze poracunali
#BB ALGORITEM
start3 <- proc.time()
bb(A)
konec3 <- proc.time()
cas3 <- (konec3-start3)[1]
cas_bb_sim <- append(cas_bb_sim,cas3)
}
velikost <- append(velikost,rep(s,3))
tip <- append(tip,c("sosed","rev","bb"))
cas_tabela <- append(cas_tabela,c(mean(cas_sosed_sim),mean(cas_reversal_sim),mean(cas_bb_sim)))
}
